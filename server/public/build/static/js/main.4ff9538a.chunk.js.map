{"version":3,"sources":["assets/defaultposter.png","pages/Home.tsx","components/ImgUploader.tsx","components/MovieForm.tsx","services/CommonTypes.ts","services/MovieService.ts","pages/movie/AddMovie.tsx","pages/movie/EditMovie.tsx","components/MovieTable.tsx","redux/actions/MovieAction.ts","pages/movie/MovieList.tsx","pages/Layout.tsx","redux/reducers/MovieReducer.ts","redux/reducers/RootReducer.ts","redux/store.ts","App.tsx","index.tsx"],"names":["module","exports","React","Component","state","showModal","this","props","value","type","uid","name","url","p","formData","FormData","append","filename","file","request","Request","action","method","body","fetch","then","resp","json","err","message","error","onChange","data","accept","listType","fileList","getFileList","customRequest","handleRequest","bind","onRemove","onPreview","setState","getUploadContent","visible","footer","onCancel","alt","style","width","src","formItemLayout","labelCol","span","wrapperCol","offset","AllAreas","label","AreaGroups","Checkbox","Group","AllTypes","TypeGroups","MovieForm","e","preventDefault","form","validateFields","errors","a","getFieldsValue","onSubmit","result","success","history","push","getFieldDecorator","handleSubmit","Item","rules","required","options","min","step","initialValue","valuePropName","TextArea","htmlType","withRouter","SwitchType","Form","create","mapPropsToFields","movie","obj","key","createFormField","console","log","getDefaultField","MovieService","axios","post","id","put","delete","get","condition","params","add","undefined","getMovieById","match","edit","onload","padding","marginBottom","display","onKeyChange","target","onPressEnter","onSearch","icon","size","marginRight","onClick","title","dataIndex","render","poster","className","defaultposterImg","filterDropdown","getFilterDropDown","filterIcon","text","join","timeLong","isHot","record","defaultChecked","newVal","onSwitchChange","_id","isComing","isClassic","to","onConfirm","onDelete","okText","cancelText","total","current","page","pageSize","limit","pagination","rowKey","dataSource","columns","getColumns","getPageConfig","handleChange","loading","saveMoviesAction","movies","payload","setLoadingAction","isLoading","setConditionAction","deleteAction","changeSwitchAction","fetchMovies","dispatch","getState","curCondition","getMovies","deleteMovie","changeSwitch","connect","MovieAction","newState","newPage","MovieTable","Header","Layout","Sider","Content","_Layout","mode","theme","path","component","Home","exact","MovieList","AddMovie","EditMovie","defaultState","totalPage","saveMovie","Math","ceil","setCondition","setLoading","filter","item","find","d","newMoive","newData","map","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","logger","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.4ff9538a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/defaultposter.b4e877ba.png\";","import  React  from \"react\";\r\n\r\nexport default class extends React.Component {\r\n    \r\n    render(){\r\n        return (\r\n            <h1>电影首页</h1>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport { Upload, Icon, message, Modal } from \"antd\";\r\n\r\nimport { UploadFile } from \"antd/lib/upload/interface\";\r\nimport { IResponseData, IResponseError } from \"../services/CommonTypes\";\r\n\r\ninterface IImgUploaderProps {\r\n    value?: string\r\n    onChange?: (imgUrl: string) => void\r\n}\r\ninterface IImgState {\r\n    showModal: boolean\r\n}\r\nexport default class extends React.Component<IImgUploaderProps, IImgState> {\r\n\r\n    state: IImgState = {\r\n        showModal: false\r\n    }\r\n\r\n    private getUploadContent() {\r\n        if (this.props.value) {\r\n            return null;\r\n        }\r\n        else {\r\n            return (\r\n                <div>\r\n                    <Icon type=\"plus\" />\r\n                    <div>\r\n                        点击上传\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    private getFileList(): UploadFile[] {\r\n        if (this.props.value) {\r\n            return [\r\n                {\r\n                    uid: this.props.value,\r\n                    name: this.props.value,\r\n                    url: this.props.value\r\n                }\r\n            ]\r\n        }\r\n        return [];\r\n    }\r\n    async handleRequest(p: any) {\r\n        let formData = new FormData();\r\n        formData.append(p.filename, p.file);\r\n        //fetch api\r\n        const request = new Request(p.action, {\r\n            method: \"post\",\r\n            body: formData\r\n        });\r\n        const resp: IResponseData<string> | IResponseError = await fetch(request).then(resp => resp.json());\r\n        if (resp.err) {\r\n            //有错误\r\n            message.error(\"上传失败！\");\r\n        }\r\n        else {\r\n            //触发回调\r\n            if (this.props.onChange) {\r\n                this.props.onChange(resp.data!);\r\n            }\r\n        }\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <Upload\r\n                    action=\"/api/upload\"\r\n                    name=\"imgfile\"\r\n                    accept=\".jpg,.png,.gif\"\r\n                    listType=\"picture-card\"\r\n                    fileList={this.getFileList()}\r\n                    customRequest={this.handleRequest.bind(this)}\r\n                    onRemove={() => {\r\n                        if (this.props.onChange) {\r\n                            this.props.onChange(\"\")\r\n                        }\r\n\r\n                    }}\r\n                    onPreview={() => {\r\n                        this.setState({\r\n                            showModal: true\r\n                        })\r\n                    }}\r\n                >\r\n                    {this.getUploadContent()}\r\n                </Upload>\r\n                <Modal visible={this.state.showModal} footer={null} onCancel={() => {\r\n                    this.setState({\r\n                        showModal: false\r\n                    })\r\n                }}>\r\n                    <img alt=\"\" style={{ width: '100%' }} src={this.props.value} />\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport { Form, Input, Button, Checkbox, InputNumber, Switch, message } from \"antd\";\r\nimport { WrappedFormUtils } from \"antd/lib/form/Form\";\r\nimport { IMovie } from \"../services/MovieService\";\r\nimport ImgUploader from \"./ImgUploader\";\r\nimport { withRouter, RouteComponentProps } from \"react-router\";\r\n\r\ninterface IFormProp extends RouteComponentProps {\r\n    form: WrappedFormUtils<any>\r\n    onSubmit: (movie: IMovie) => Promise<string>\r\n    movie?: IMovie\r\n}\r\n\r\nconst formItemLayout = {\r\n    labelCol: {\r\n        span: 4\r\n    },\r\n    wrapperCol: {\r\n        span: 19,\r\n        offset: 1\r\n    }\r\n};\r\n\r\nconst AllAreas: { label: string, value: string }[] = [\r\n    { label: \"中国大陆\", value: \"中国大陆\" },\r\n    { label: \"美国\", value: \"美国\" },\r\n    { label: \"中国台湾\", value: \"中国台湾\" },\r\n    { label: \"中国香港\", value: \"中国香港\" },\r\n];\r\n\r\nconst AreaGroups = Checkbox.Group;\r\n\r\nconst AllTypes: { label: string, value: string }[] = [\r\n    { label: \"喜剧\", value: \"喜剧\" },\r\n    { label: \"灾难\", value: \"灾难\" },\r\n    { label: \"动作\", value: \"动作\" },\r\n    { label: \"爱情\", value: \"爱情\" },\r\n];\r\n\r\nconst TypeGroups = Checkbox.Group;\r\n\r\nclass MovieForm extends React.Component<IFormProp> {\r\n\r\n    private handleSubmit(e: React.FormEvent<any>) {\r\n        e.preventDefault();\r\n        //获取表单数据\r\n        this.props.form.validateFields(async errors => {\r\n            if (!errors) {\r\n                const formData = this.props.form.getFieldsValue();\r\n                const result = await this.props.onSubmit(formData as IMovie);\r\n                if (result) {\r\n                    message.error(result)\r\n                }\r\n                else {\r\n                    message.success(\"处理成功\", 1, () => {\r\n                        //跳转页面\r\n                        this.props.history.push(\"/movie\")\r\n                    })\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form;\r\n\r\n        return (\r\n            <Form\r\n                onSubmit={this.handleSubmit.bind(this)}\r\n                {...formItemLayout}\r\n                style={{ width: \"400px\" }}>\r\n                <Form.Item\r\n                    label=\"电影名称\"\r\n                >\r\n                    {getFieldDecorator<IMovie>(\"name\", {\r\n                        rules: [{ required: true, message: '请填写电影名称' }],\r\n                    })(\r\n                        <Input />\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item\r\n                    label=\"封面图\"\r\n                >\r\n                    {getFieldDecorator<IMovie>(\"poster\")(\r\n                        <ImgUploader />\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item\r\n                    label=\"地区\"\r\n                >\r\n                    {getFieldDecorator<IMovie>(\"areas\", {\r\n                        rules: [{ required: true, message: '请选择地区' }],\r\n                    })(\r\n                        <AreaGroups options={AllAreas}></AreaGroups>\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item\r\n                    label=\"类型\"\r\n                >\r\n                    {getFieldDecorator<IMovie>(\"types\", {\r\n                        rules: [{ required: true, message: '请选择类型' }],\r\n                    })(\r\n                        <TypeGroups options={AllTypes}></TypeGroups>\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item\r\n                    label=\"时长(分钟)\"\r\n                >\r\n                    {getFieldDecorator<IMovie>(\"timeLong\", {\r\n                        rules: [{ required: true, message: '请填写时长' }],\r\n                    })(\r\n                        <InputNumber min={1} step={10} />\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item\r\n                    label=\"正在热映\"\r\n                >\r\n                    {getFieldDecorator<IMovie>(\"isHot\", {\r\n                        initialValue: false,\r\n                        valuePropName: \"checked\"\r\n                    })(\r\n                        <Switch />\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item\r\n                    label=\"即将上映\"\r\n                >\r\n                    {getFieldDecorator<IMovie>(\"isComing\", {\r\n                        initialValue: false,\r\n                        valuePropName: \"checked\"\r\n                    })(\r\n                        <Switch />\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item\r\n                    label=\"经典影片\"\r\n                >\r\n                    {getFieldDecorator<IMovie>(\"isClassic\", {\r\n                        initialValue: false,\r\n                        valuePropName: \"checked\"\r\n                    })(\r\n                        <Switch />\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item\r\n                    label=\"描述\"\r\n                >\r\n                    {getFieldDecorator<IMovie>(\"description\")(\r\n                        <Input.TextArea />\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item\r\n                    labelCol={{ span: 0 }}\r\n                    wrapperCol={{ span: 19, offset: 5 }}\r\n                >\r\n                    <Button type=\"primary\" htmlType=\"submit\">提交</Button>\r\n                </Form.Item>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\ntype MovieFields = {\r\n    [P in Exclude<keyof IMovie, \"_id\">]: any\r\n}\r\n\r\nfunction getDefaultField(movie: IMovie): MovieFields {\r\n    const obj: any = {};\r\n    for (const key in movie) {\r\n        obj[key] = Form.createFormField({\r\n            value: (movie as any)[key] \r\n        })\r\n    }\r\n    console.log(obj);\r\n    return obj;\r\n}\r\n\r\nexport default withRouter(Form.create<IFormProp>({\r\n    mapPropsToFields: props => {\r\n        if (props.movie) {\r\n            return getDefaultField(props.movie);\r\n        }\r\n    }\r\n})(MovieForm));","\r\nexport type IResponseData<T> = {\r\n    err: '';\r\n    data: T;\r\n}\r\nexport interface IResponseError {\r\n    err: string;\r\n    data: null;\r\n}\r\nexport interface ISearchCondition {\r\n    page?: number;\r\n    limit?: number;\r\n    key?: string;\r\n}\r\nexport interface IResponsePageData<T> {\r\n    data: T[];\r\n    err:'';\r\n    total: number;\r\n}\r\nexport enum SwitchType {\r\n    isHot = 'isHot',\r\n    isComing = 'isComing',\r\n    isClassic = 'isClassic'\r\n}\r\n\r\n\r\n\r\n","import axios from \"axios\";\r\nimport { IResponseData, IResponseError, ISearchCondition, IResponsePageData } from \"./CommonTypes\";\r\nexport interface IMovie {\r\n    _id?: string;\r\n    name: string;\r\n    types: string[];\r\n    areas: string[];\r\n    timeLong: number;\r\n    isHot: boolean;\r\n    isComing: boolean;\r\n    isClassic: boolean;\r\n    description?: string;\r\n    poster?: string;\r\n}\r\n\r\nexport class MovieService {\r\n    public static async add(movie: IMovie): Promise<IResponseData<IMovie> | IResponseError>{\r\n        const { data } = await axios.post('/api/movie',movie);\r\n        return data;\r\n    }\r\n\r\n    public static async edit(id: string, movie: Partial<IMovie>): Promise<IResponseData<true> | IResponseError>{\r\n        const { data } = await axios.put('/api/movie/' + id, movie);\r\n        return data;\r\n    }\r\n\r\n    public static async delete(id: string):Promise<IResponseData<true> | IResponseError>{\r\n        const { data } = await axios.delete('/api/movie/' + id);\r\n        return data;\r\n    }\r\n\r\n    public static async getMovieById(id: string): Promise<IResponseData<IMovie> | IResponseError> {\r\n        const { data } = await axios.get('/api/movie/' + id);\r\n        return data;\r\n    }\r\n\r\n    public static async getMovies(condition:ISearchCondition): Promise<IResponsePageData<IMovie>> {\r\n        const { data } = await axios.get('/api/movie',{\r\n            params: condition\r\n        })\r\n        return data;\r\n    }\r\n}\r\n\r\n\r\n\r\n","import  React  from \"react\";\r\nimport MovieForm from \"../../components/MovieForm\";\r\nimport { MovieService } from \"../../services/MovieService\";\r\n\r\nexport default class extends React.Component {\r\n    render(){\r\n        return (\r\n            <MovieForm onSubmit={async movie => {\r\n                const resp = await MovieService.add(movie)\r\n                if (resp.data) {\r\n                    return \"\";\r\n                }\r\n                else {\r\n                    return resp.err;\r\n                }\r\n            }}></MovieForm>\r\n        );\r\n    }\r\n}","import React from \"react\"\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport MovieForm from \"../../components/MovieForm\";\r\nimport { MovieService, IMovie } from \"../../services/MovieService\";\r\n\r\ninterface IParams {\r\n    id: string\r\n}\r\n\r\ninterface EditPageState {\r\n    movie?: IMovie\r\n}\r\n\r\nexport default class extends React.Component<RouteComponentProps<IParams>, EditPageState> {\r\n    state: EditPageState = {\r\n        movie: undefined\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const resp = await MovieService.getMovieById(this.props.match.params.id);\r\n        if (resp.data) {\r\n            this.setState({\r\n                movie: resp.data\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <MovieForm\r\n                movie={this.state.movie}\r\n                onSubmit={async movie => {\r\n                    const resp = await MovieService.edit(this.props.match.params.id, movie)\r\n                    if (resp.data) {\r\n                        return \"\";\r\n                    }\r\n                    else {\r\n                        return resp.err;\r\n                    }\r\n                }}></MovieForm>\r\n        );\r\n    }\r\n}","import { IMovieState } from \"../redux/reducers/MovieReducer\";\r\nimport React from \"react\";\r\nimport { Table, Switch, Button, Popconfirm, message, Icon, Input } from \"antd\";\r\nimport { IMovie } from \"../services/MovieService\";\r\nimport { ColumnProps, PaginationConfig } from \"antd/lib/table\";\r\nimport { SwitchType } from \"../services/CommonTypes\";\r\nimport defaultposterImg from \"../assets/defaultposter.png\"\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nexport interface IMovieTableEvents{\r\n    onload:()=>void;\r\n    onSwitchChange: (type:SwitchType, newState:boolean, id:string)=>void;\r\n    onDelete: (id:string)=> void;\r\n    onChange: (newPage: number) => void;\r\n    onKeyChange: (key: string) => void\r\n    onSearch: () => void\r\n}\r\n\r\nexport default class extends React.Component<IMovieState & IMovieTableEvents>{\r\n\r\n    componentDidMount(){\r\n        if(this.props.onload){\r\n            this.props.onload()\r\n        }\r\n    }\r\n    private getFilterDropDown(p: any) {\r\n        return (\r\n            <div style={{ padding: 8 }}>\r\n                <Input\r\n                    style={{ width: 188, marginBottom: 8, display: 'block' }}\r\n                    value={this.props.condition.key}\r\n                    onChange={e => this.props.onKeyChange(e.target.value)}\r\n                    onPressEnter={this.props.onSearch}\r\n                />\r\n                <Button\r\n                    type=\"primary\"\r\n                    icon=\"search\"\r\n                    size=\"small\"\r\n                    style={{ width: 90, marginRight: 8 }}\r\n                    onClick={this.props.onSearch}\r\n                >\r\n                    搜索\r\n                </Button>\r\n                <Button\r\n                    size=\"small\"\r\n                    style={{ width: 90 }}\r\n                    onClick={() => {\r\n                        this.props.onKeyChange(\"\")\r\n                        this.props.onSearch();\r\n                    }}\r\n                >\r\n                    重置\r\n                </Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getColumns():ColumnProps<IMovie>[] {\r\n        return [\r\n            {\r\n                title: \"封面\",\r\n                dataIndex: \"poster\",\r\n                render: poster => {\r\n                    if (poster) {\r\n                        return <img alt=\"\" className=\"tablePoster\" src={poster} />\r\n                    }\r\n                    else {\r\n                        return <img alt=\"\" className=\"tablePoster\" src={defaultposterImg} />\r\n                    }\r\n                }\r\n            },\r\n            { \r\n                title: '名称', \r\n                dataIndex: 'name',\r\n                filterDropdown: this.getFilterDropDown.bind(this),\r\n                filterIcon: <Icon type=\"search\" />\r\n            },\r\n            {   title: '地区',\r\n                dataIndex: 'areas',\r\n                render(text) {\r\n                    return text.join(', ')\r\n                }\r\n            },\r\n            {\r\n                title: '类型',\r\n                dataIndex: 'types',\r\n                render(text) {\r\n                    return text.join(', ')\r\n                }\r\n            },\r\n            {\r\n                title: '时长',\r\n                dataIndex: 'timeLong',\r\n                render(timeLong) {\r\n                    return timeLong + '分钟'\r\n                }\r\n            },\r\n            {\r\n                title: '正在热映',\r\n                dataIndex: 'isHot',\r\n                render:(isHot,record)=> {\r\n                    return <Switch defaultChecked={isHot} onChange={(newVal)=>{\r\n                        this.props.onSwitchChange(SwitchType.isHot, newVal,record._id!)\r\n                    }}/>\r\n                }\r\n            },\r\n            {\r\n                title: '即将上映',\r\n                dataIndex: 'isComing',\r\n                render: (isComing, record) => {\r\n                    return <Switch defaultChecked={isComing} onChange={(newVal) => {\r\n                        this.props.onSwitchChange(SwitchType.isComing, newVal, record._id!)\r\n                    }} />\r\n                }\r\n            },\r\n            {\r\n                title: '经典影片',\r\n                dataIndex: 'isClassic',\r\n                render: (isClassic, record) => {\r\n                    return <Switch defaultChecked={isClassic} onChange={(newVal) => {\r\n                        this.props.onSwitchChange(SwitchType.isClassic, newVal, record._id!)\r\n                    }} />\r\n                }\r\n            },\r\n            {\r\n                title: '操作',\r\n                dataIndex: '_id',\r\n                render: (_id) => {\r\n                    return (\r\n                        <div>\r\n                            <NavLink to={\"/movie/edit/\" + _id}>\r\n                                <Button type=\"primary\" size=\"small\">编辑</Button>\r\n                            </NavLink><Popconfirm title=\"确定要删除吗?\" onConfirm={async () => {\r\n                                await this.props.onDelete(_id);\r\n                                message.success('删除成功');\r\n                            }} okText=\"确定\" cancelText=\"取消\">\r\n                                <Button type=\"danger\" size=\"small\">删除</Button>\r\n                            </Popconfirm>\r\n                        </div>\r\n                    )\r\n                }\r\n            },\r\n        ]\r\n    }\r\n    getPageConfig(): PaginationConfig | false {\r\n        if (this.props.total === 0) {\r\n            return false;\r\n        }\r\n        return {\r\n            current: this.props.condition.page,\r\n            pageSize: this.props.condition.limit,\r\n            total: this.props.total\r\n        };\r\n    }\r\n    handleChange(pagination: PaginationConfig) {\r\n        this.props.onChange(pagination.current!);\r\n    }\r\n    render(){\r\n        return(\r\n            <Table \r\n            rowKey=\"_id\"\r\n            dataSource={this.props.data}\r\n            columns={this.getColumns()}\r\n            pagination={this.getPageConfig()}\r\n            onChange={this.handleChange.bind(this)}\r\n            loading={this.props.loading}\r\n            ></Table>\r\n        )\r\n    }\r\n}","\r\nimport { IAction } from './ActionTypes';\r\nimport { IMovie, MovieService } from '../../services/MovieService';\r\nimport { ISearchCondition, SwitchType } from '../../services/CommonTypes';\r\nimport { ThunkAction } from 'redux-thunk'\r\nimport { IRootState } from '../reducers/RootReducer';\r\n\r\nexport type SaveMoviesAction = IAction<'movie_save',{\r\n    movies: IMovie[];\r\n    total: number;\r\n}>\r\n\r\nfunction saveMoviesAction(movies: IMovie[], total: number): SaveMoviesAction{\r\n    return {\r\n        type: 'movie_save',\r\n        payload: {\r\n            movies,\r\n            total\r\n        }\r\n    }\r\n}\r\n\r\nexport type SetLoadingAction = IAction<'movie_setLoading',boolean>;\r\nfunction setLoadingAction(isLoading: boolean): SetLoadingAction {\r\n    return {\r\n        type: 'movie_setLoading',\r\n        payload: isLoading\r\n    }\r\n}\r\n\r\nexport type SetConditionAction = IAction<'movie_setCondition',ISearchCondition>;\r\nfunction setConditionAction(condition: ISearchCondition): SetConditionAction{\r\n    return {\r\n        type:'movie_setCondition',\r\n        payload: condition\r\n    }\r\n}\r\n\r\nexport type DeleteAction = IAction<'movie_delete',string>;\r\nfunction deleteAction(id:string):DeleteAction{\r\n    return{\r\n        type: 'movie_delete',\r\n        payload:id\r\n    }\r\n}\r\n\r\nexport type MovieChangeSwitchAction = IAction<'movie_switch',{\r\n    type: SwitchType,\r\n    id: string,\r\n    newVal: boolean\r\n}>\r\nfunction changeSwitchAction(type: SwitchType, newVal: boolean, id: string): MovieChangeSwitchAction{\r\n    return {\r\n        type: 'movie_switch',\r\n        payload: {\r\n            type,\r\n            newVal,\r\n            id\r\n        }\r\n    }\r\n}\r\n\r\n// 根据条件从服务器端获取数据\r\n function fetchMovies(condition:ISearchCondition)\r\n: ThunkAction<Promise<void>,IRootState,any,MovieAction>{\r\n    return async (dispatch,getState)=>{\r\n        dispatch(setLoadingAction(true));\r\n        dispatch(setConditionAction(condition))\r\n        const curCondition = getState().movie.condition;\r\n        const resp = await MovieService.getMovies(curCondition);\r\n        dispatch(saveMoviesAction(resp.data,resp.total));\r\n        dispatch(setLoadingAction(false));\r\n    }\r\n}\r\n\r\nfunction deleteMovie(id: string)\r\n    : ThunkAction<Promise<void>, IRootState, any, MovieAction> {\r\n    return async (dispatch) => {\r\n        dispatch(setLoadingAction(true));\r\n        await MovieService.delete(id);\r\n        dispatch(deleteAction(id))\r\n        dispatch(setLoadingAction(false));\r\n    }\r\n}\r\n\r\nfunction changeSwitch(type: SwitchType, newVal: boolean, id: string)\r\n    : ThunkAction<Promise<void>, IRootState, any, MovieAction> {\r\n    return async dispatch => {\r\n        dispatch(changeSwitchAction(type, newVal, id));\r\n        await MovieService.edit(id, {\r\n            [type]: newVal\r\n        })\r\n    }\r\n}\r\n\r\nexport type MovieAction = SaveMoviesAction | SetLoadingAction | SetConditionAction | DeleteAction | MovieChangeSwitchAction\r\n\r\nexport default {\r\n    saveMoviesAction,\r\n    setLoadingAction,\r\n    setConditionAction,\r\n    deleteAction,\r\n    fetchMovies,\r\n    deleteMovie,\r\n    changeSwitchAction,\r\n    changeSwitch\r\n}\r\n","import { Dispatch }  from \"react\";\r\nimport MovieTable, { IMovieTableEvents } from \"../../components/MovieTable\"\r\nimport { connect } from \"react-redux\"\r\nimport { IRootState } from \"../../redux/reducers/RootReducer\";\r\nimport { IMovieState } from \"../../redux/reducers/MovieReducer\";\r\nimport MovieAction from \"../../redux/actions/MovieAction\";\r\n\r\nfunction mapStateToProps(state: IRootState): IMovieState{\r\n    return state.movie;\r\n}\r\nfunction mapDispatchToProps(dispatch: Dispatch<any>): IMovieTableEvents{\r\n    return{\r\n        onload(){\r\n            dispatch(MovieAction.fetchMovies({\r\n                limit: 10,\r\n                key: '',\r\n                page: 1\r\n            }))\r\n        },\r\n        onSwitchChange(type,newState,id){\r\n            dispatch(MovieAction.changeSwitch(type, newState, id));\r\n        },\r\n        async onDelete(id:string){\r\n            await dispatch(MovieAction.deleteMovie(id))\r\n        },\r\n        onChange(newPage) {\r\n            dispatch(MovieAction.fetchMovies({\r\n                page: newPage\r\n            }))\r\n        },\r\n        onKeyChange(key) {\r\n            dispatch(MovieAction.setConditionAction({\r\n                key\r\n            }))\r\n        },\r\n        onSearch() {\r\n            dispatch(MovieAction.fetchMovies({\r\n                page: 1\r\n            }))\r\n        }\r\n\r\n    }\r\n\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MovieTable);\r\n","import  React  from \"react\";\r\nimport { Route, NavLink } from \"react-router-dom\";\r\nimport Home from \"./Home\";\r\nimport AddMovie from \"./movie/AddMovie\";\r\nimport EditMovie from \"./movie/EditMovie\";\r\nimport MovieList from \"./movie/MovieList\";\r\nimport { Layout, Menu} from 'antd';\r\nconst { Header, Sider, Content } = Layout;\r\n\r\nconst _Layout:React.FC = function(){\r\n    return(\r\n        \r\n        <div className=\"container\">\r\n            <Layout>\r\n                <Header className=\"header\">\r\n                    <NavLink to='/'>猫眼电影管理系统</NavLink>\r\n                </Header>\r\n                <Layout>\r\n                    <Sider>\r\n                        <Menu\r\n                            mode=\"inline\"\r\n                            theme=\"dark\"\r\n                        >\r\n                            <Menu.Item key=\"1\">\r\n                                <NavLink to='/movie'>电影列表</NavLink>\r\n                            </Menu.Item>\r\n                            <Menu.Item key=\"2\">\r\n                                <NavLink to='/movie/add'>添加电影</NavLink>\r\n                            </Menu.Item>\r\n                        </Menu>\r\n                    </Sider>\r\n                    <Content>\r\n                        <div className=\"main\">\r\n                            <Route path=\"/\" component={Home} exact={true}></Route>\r\n                            <Route path=\"/movie\" component={MovieList} exact={true}></Route>\r\n                            <Route path=\"/movie/add\" component={AddMovie}></Route>\r\n                            <Route path=\"/movie/edit/:id\" component={EditMovie}></Route>\r\n                        </div>\r\n                    </Content>\r\n                    \r\n                </Layout>\r\n            </Layout>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default _Layout;\r\n","import { IMovie } from \"../../services/MovieService\";\r\nimport { ISearchCondition } from \"../../services/CommonTypes\";\r\nimport { MovieAction, SaveMoviesAction, SetConditionAction, SetLoadingAction, DeleteAction, MovieChangeSwitchAction } from \"../actions/MovieAction\";\r\nimport { Reducer } from \"react\";\r\n\r\nexport type IMovieCondition = Required<ISearchCondition>;\r\n\r\nexport interface IMovieState {\r\n    data: IMovie[];\r\n    condition: IMovieCondition;\r\n    total: number;\r\n    loading: boolean;\r\n    totalPage: number;\r\n}\r\n\r\nconst defaultState:IMovieState = {\r\n    data: [],\r\n    condition:{\r\n        limit: 10,\r\n        page: 1,\r\n        key: ''\r\n    },\r\n    total: 0,\r\n    loading: false,\r\n    totalPage: 0\r\n} \r\ntype MovieReducer<A> = Reducer<IMovieState, A>\r\n\r\nconst saveMovie: MovieReducer<SaveMoviesAction> = function(state, action) {\r\n    return {\r\n        ...state,\r\n        data: action.payload.movies,\r\n        total: action.payload.total,\r\n        totalPage: Math.ceil(action.payload.total / state.condition.limit)\r\n    }\r\n}\r\nconst setCondition: MovieReducer<SetConditionAction> = function (state, action) {\r\n    const newState = {\r\n        ...state,\r\n        condition: {\r\n            ...state.condition,\r\n            ...action.payload\r\n        }\r\n    };\r\n    newState.totalPage = Math.ceil(newState.total / newState.condition.limit);\r\n    return newState;\r\n}\r\nconst setLoading: MovieReducer<SetLoadingAction> = function (state, action) {\r\n    return {\r\n        ...state,\r\n        loading: action.payload\r\n    }\r\n}\r\nconst deleteMovie: MovieReducer<DeleteAction> = function (state, action) {\r\n    return {\r\n        ...state,\r\n        data: state.data.filter((item)=>item._id !== action.payload),\r\n        total: state.total - 1,\r\n        totalPage: Math.ceil((state.total - 1) / state.condition.limit)\r\n    }\r\n}\r\n\r\nconst changeSwitch: MovieReducer<MovieChangeSwitchAction> = function (state, action) {\r\n    // action.payload.\r\n    //1. 根据id找到对象\r\n    const movie = state.data.find(d => d._id === action.payload.id);\r\n    if (!movie) {\r\n        return state;\r\n    }\r\n    //2. 对象克隆\r\n    const newMoive = { ...movie };\r\n    newMoive[action.payload.type] = action.payload.newVal;\r\n\r\n    //3. 将对象重新放入到数组\r\n    const newData = state.data.map(d => {\r\n        if (d._id === action.payload.id) {\r\n            return newMoive;\r\n        }\r\n        return d;\r\n    })\r\n\r\n    return {\r\n        ...state,\r\n        data: newData\r\n    }\r\n}\r\n\r\nexport default function (state: IMovieState = defaultState, action:MovieAction){\r\n    switch (action.type) {\r\n        case 'movie_save':\r\n            return saveMovie(state,action);\r\n        case 'movie_setLoading':\r\n            return setLoading(state, action);\r\n        case 'movie_setCondition':\r\n            return setCondition(state, action);\r\n        case 'movie_delete':\r\n            return deleteMovie(state, action);\r\n        case 'movie_switch':\r\n            return changeSwitch(state, action);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n","import { combineReducers } from 'redux';  \r\nimport movie, { IMovieState } from './MovieReducer'\r\n\r\nexport type IRootState = {\r\n    movie:IMovieState\r\n}\r\n\r\nexport const rootReducer = combineReducers({\r\n    movie\r\n})\r\n\r\n\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport { rootReducer, IRootState } from './reducers/RootReducer'\r\nimport logger from 'redux-logger'\r\nimport thunk, { ThunkMiddleware } from \"redux-thunk\";\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk as ThunkMiddleware<IRootState>,logger))\r\n\r\n","import React from 'react';\nimport './App.css';\nimport { Route,BrowserRouter } from \"react-router-dom\";\nimport Layout from \"./pages/Layout\";\nimport { Provider } from \"react-redux\";\nimport { store } from './redux/store';\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <BrowserRouter>\n        <Route path='/' component={Layout}></Route>\n      </BrowserRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.css'\nimport App from './App';\n// import { store } from './redux/store';\n// import MovieAction from './redux/actions/MovieAction';\n// import { MovieService } from './services/MovieService';\n\n\n// store.dispatch(MovieAction.fetchMovies({\n//     page: 2\n// })).then(()=>{\n//     store.dispatch(MovieAction.deleteMovie('5d81e7df3082ca03b8baade9'))\n// })\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\n"],"sourceRoot":""}